#!/bin/bash

# semver

SEMVER_REGEX="^(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)(\-[0-9A-Za-z-]+(\.[0-9A-Za-z-]+)*)?(\+[0-9A-Za-z-]+(\.[0-9A-Za-z-]+)*)?$"

function error {
  echo -e "$1" >&2
  exit 1
}

function validate-version {
  local version=$1
  if [[ "$version" =~ $SEMVER_REGEX ]]; then
    # if a second argument is passed, store the result in var named by $2
    if [ "$#" -eq "2" ]; then
      local major=${BASH_REMATCH[1]}
      local minor=${BASH_REMATCH[2]}
      local patch=${BASH_REMATCH[3]}
      local prere=${BASH_REMATCH[4]}
      local build=${BASH_REMATCH[5]}
      eval "$2=(\"$major\" \"$minor\" \"$patch\" \"$prere\" \"$build\")"
    else
      echo "$version"
    fi
  else
    error "version $version does not match the semver scheme 'X.Y.Z(-PRERELEASE)(+BUILD)'. See help for more information."
  fi
}

function compare-version {
  validate-version "$1" V
  validate-version "$2" V_

  # MAJOR, MINOR and PATCH should compare numericaly
  for i in 0 1 2; do
    local diff=$((${V[$i]} - ${V_[$i]}))
    if [[ $diff -lt 0 ]]; then
      echo -1; return 0
    elif [[ $diff -gt 0 ]]; then
      echo 1; return 0
    fi
  done

  # PREREL should compare with the ASCII order.
  if [[ -z "${V[3]}" ]] && [[ -n "${V_[3]}" ]]; then
    echo -1; return 0;
  elif [[ -n "${V[3]}" ]] && [[ -z "${V_[3]}" ]]; then
    echo 1; return 0;
  elif [[ -n "${V[3]}" ]] && [[ -n "${V_[3]}" ]]; then
    if [[ "${V[3]}" > "${V_[3]}" ]]; then
      echo 1; return 0;
    elif [[ "${V[3]}" < "${V_[3]}" ]]; then
      echo -1; return 0;
    fi
  fi

  echo 0
}

check_semver()
{
    local expected_version=$2
    local name=`echo $1 | sed -E "s/\"([^\"]+)\":.*/\\1/"`
    local version=`echo $1 |\
      grep -ioh '[0-9]\+\.[0-9]\+\.[0-9]\+[0-9A-Za-z.+-]*' |\
      head -n 1`
    compare_result=$(compare-version "$version" "$expected_version")
    if [[ $compare_result -lt 0 ]]
    then
      echo "*** \"$name\" Current version: $version; Expected version: $expected_version. Please update it! ***"
      exit 1
    fi
}
# git server hook

NULL_SHA1="0000000000000000000000000000000000000000" # 40 zeros
INSTALL_TIP="The project has not installed"
ERROR_TIP="Please install them using cmd: npm install [package]@latest --save-dev"

while read oldrev newrev ref
do
    #delete remote branch
    if [ "${newrev}" == "${NULL_SHA1}" ]; then
      exit 0
    fi

    result=0
    package="$(git cat-file blob $newrev:package.json)"
    yarn_flag=$(git cat-file -e $newrev:yarn.lock; echo $?)

    git_client_hook=$(echo $package | grep -c '"git-client-hook":')
    npm_client_hook=$(echo "$package" | grep -c '"@mtfe/npm-client-hook":')
    git_client_hook_line=$(git cat-file blob $newrev:package.json | grep -e '"git-client-hook":')

    if [ ${git_client_hook} -le 0 ]; then
      echo "${INSTALL_TIP} git-client-hook ❌ "
      echo "${ERROR_TIP}"
      result=1
    fi
    if [ $yarn_flag -ne 0 -a ${npm_client_hook} -le 0 ]; then
      echo "${INSTALL_TIP} @mtfe/npm-client-hook ❌ "
      echo "${ERROR_TIP}"
      echo "Or using \"yarn\" to manage your project node modules."
      result=1
    fi

    check_semver "$git_client_hook_line" "0.0.23"

    exit ${result}
done

